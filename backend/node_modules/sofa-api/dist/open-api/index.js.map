{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/open-api/index.ts"],"names":[],"mappings":";;AAAA,qCAKiB;AACjB,+BAA+B;AAC/B,2BAAmC;AAEnC,mCAAoD;AACpD,6CAAsD;AAItD,SAAgB,OAAO,CAAC,EACtB,MAAM,EACN,IAAI,GAIL;IACC,MAAM,KAAK,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC;IAClC,MAAM,OAAO,GAAQ;QACnB,OAAO,EAAE,OAAO;QAChB,IAAI;QACJ,KAAK,EAAE,EAAE;QACT,UAAU,EAAE;YACV,OAAO,EAAE,EAAE;SACZ;KACF,CAAC;IAEF,KAAK,MAAM,QAAQ,IAAI,KAAK,EAAE;QAC5B,MAAM,IAAI,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC;QAE7B,IACE,CAAC,sBAAY,CAAC,IAAI,CAAC,IAAI,2BAAiB,CAAC,IAAI,CAAC,CAAC;YAC/C,CAAC,6BAAmB,CAAC,IAAI,CAAC,EAC1B;YACA,OAAO,CAAC,UAAW,CAAC,OAAQ,CAAC,QAAQ,CAAC,GAAG,iCAAyB,CAAC,IAAI,CAAC,CAAC;SAC1E;KACF;IAED,OAAO;QACL,QAAQ,CACN,IAAe,EACf,MAEC;YAED,MAAM,QAAQ,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;YACnD,MAAM,IAAI,GACR,QAAQ;gBACR,IAAI,CAAC,IAAI,CAAC,OAAO,CACf,gBAAgB,EAChB,KAAK,CAAC,EAAE,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CACvC,CAAC;YAEJ,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;gBACxB,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;aAC1B;YAED,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,GAAG,mCAAsB,CAAC;gBACtE,GAAG,EAAE,IAAI;gBACT,SAAS,EAAE,IAAI,CAAC,QAAQ;gBACxB,MAAM;gBACN,cAAc,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC;aAC/D,CAAC,CAAC;YAEH,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,GAAG;gBAC9B,IAAI,EAAE,QAAQ;aACf,CAAC;QACJ,CAAC;QACD,GAAG;YACD,OAAO,OAAO,CAAC;QACjB,CAAC;QACD,IAAI,CAAC,QAAgB;YACnB,MAAM,MAAM,GAAG,UAAU,CAAC;YAC1B,MAAM,MAAM,GAAG,UAAU,CAAC;YAE1B,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;gBACzB,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;aACzD;iBAAM,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;gBAChC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC;aAC1D;iBAAM;gBACL,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;aACxD;QACH,CAAC;KACF,CAAC;AACJ,CAAC;AA1ED,0BA0EC;AAED,SAAS,WAAW,CAAC,QAAgB,EAAE,QAAgB;IACrD,kBAAa,CAAC,QAAQ,EAAE,QAAQ,EAAE;QAChC,QAAQ,EAAE,OAAO;KAClB,CAAC,CAAC;AACL,CAAC","sourcesContent":["import {\n  GraphQLSchema,\n  isObjectType,\n  isInputObjectType,\n  isIntrospectionType,\n} from 'graphql';\nimport * as YAML from 'yamljs';\nimport { writeFileSync } from 'fs';\n\nimport { buildSchemaObjectFromType } from './types';\nimport { buildPathFromOperation } from './operations';\nimport { RouteInfo } from '../types';\nimport { OpenAPI } from './interfaces';\n\nexport function OpenAPI({\n  schema,\n  info,\n}: {\n  schema: GraphQLSchema;\n  info: Record<string, any>;\n}) {\n  const types = schema.getTypeMap();\n  const swagger: any = {\n    openapi: '3.0.0',\n    info,\n    paths: {},\n    components: {\n      schemas: {},\n    },\n  };\n\n  for (const typeName in types) {\n    const type = types[typeName];\n\n    if (\n      (isObjectType(type) || isInputObjectType(type)) &&\n      !isIntrospectionType(type)\n    ) {\n      swagger.components!.schemas![typeName] = buildSchemaObjectFromType(type);\n    }\n  }\n\n  return {\n    addRoute(\n      info: RouteInfo,\n      config?: {\n        basePath?: string;\n      }\n    ) {\n      const basePath = (config && config.basePath) || '';\n      const path =\n        basePath +\n        info.path.replace(\n          /\\:[a-z0-9]+\\w/i,\n          param => `{${param.replace(':', '')}}`\n        );\n\n      if (!swagger.paths[path]) {\n        swagger.paths[path] = {};\n      }\n\n      swagger.paths[path][info.method.toLowerCase()] = buildPathFromOperation({\n        url: path,\n        operation: info.document,\n        schema,\n        useRequestBody: ['POST', 'PUT', 'PATCH'].includes(info.method),\n      });\n\n      swagger.components.schemas.ID = {\n        type: 'string',\n      };\n    },\n    get() {\n      return swagger;\n    },\n    save(filepath: string) {\n      const isJSON = /\\.json$/i;\n      const isYAML = /.ya?ml$/i;\n\n      if (isJSON.test(filepath)) {\n        writeOutput(filepath, JSON.stringify(swagger, null, 2));\n      } else if (isYAML.test(filepath)) {\n        writeOutput(filepath, YAML.stringify(swagger, Infinity));\n      } else {\n        throw new Error('We only support JSON and YAML files');\n      }\n    },\n  };\n}\n\nfunction writeOutput(filepath: string, contents: string) {\n  writeFileSync(filepath, contents, {\n    encoding: 'utf-8',\n  });\n}\n"]}