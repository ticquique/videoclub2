{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/open-api/types.ts"],"names":[],"mappings":";;AAAA,qCAWiB;AACjB,mCAAmD;AAEnD,SAAgB,yBAAyB,CACvC,IAAgD;IAEhD,MAAM,QAAQ,GAAa,EAAE,CAAC;IAC9B,MAAM,UAAU,GAAwB,EAAE,CAAC;IAE3C,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;IAEhC,KAAK,MAAM,SAAS,IAAI,MAAM,EAAE;QAC9B,MAAM,KAAK,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;QAEhC,IAAI,uBAAa,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;YAC7B,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;SAC3B;QAED,UAAU,CAAC,SAAS,CAAC,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC;QAC5C,IAAI,KAAK,CAAC,WAAW,EAAE;YACrB,UAAU,CAAC,SAAS,CAAC,CAAC,WAAW,GAAG,KAAK,CAAC,WAAW,CAAC;SACvD;KACF;IAED,mDACE,IAAI,EAAE,QAAQ,IACX,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,KACxC,UAAU,KACP,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAC9D;AACJ,CAAC;AA3BD,8DA2BC;AAED,SAAS,YAAY,CAAC,KAAiD;IACrE,OAAO,gBAAgB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AACtC,CAAC;AAED,kBAAkB;AAClB,eAAe;AACf,8BAA8B;AAC9B,SAAgB,gBAAgB,CAC9B,IAA0C;IAE1C,IAAI,uBAAa,CAAC,IAAI,CAAC,EAAE;QACvB,OAAO,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACtC;IAED,IAAI,oBAAU,CAAC,IAAI,CAAC,EAAE;QACpB,OAAO;YACL,IAAI,EAAE,OAAO;YACb,KAAK,EAAE,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC;SACrC,CAAC;KACH;IAED,IAAI,sBAAY,CAAC,IAAI,CAAC,EAAE;QACtB,OAAO;YACL,IAAI,EAAE,gBAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;SAC1B,CAAC;KACH;IAED,IAAI,sBAAY,CAAC,IAAI,CAAC,EAAE;QACtB,OAAO,CACL,sBAAc,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI;YAC3B,IAAI,EAAE,QAAQ;SACf,CACF,CAAC;KACH;IAED,OAAO;QACL,IAAI,EAAE,QAAQ;KACf,CAAC;AACJ,CAAC;AA/BD,4CA+BC","sourcesContent":["import {\n  GraphQLObjectType,\n  GraphQLInputObjectType,\n  GraphQLField,\n  GraphQLInputField,\n  isNonNullType,\n  GraphQLOutputType,\n  isListType,\n  isObjectType,\n  isScalarType,\n  GraphQLNamedType,\n} from 'graphql';\nimport { mapToPrimitive, mapToRef } from './utils';\n\nexport function buildSchemaObjectFromType(\n  type: GraphQLObjectType | GraphQLInputObjectType\n): any {\n  const required: string[] = [];\n  const properties: Record<string, any> = {};\n\n  const fields = type.getFields();\n\n  for (const fieldName in fields) {\n    const field = fields[fieldName];\n\n    if (isNonNullType(field.type)) {\n      required.push(field.name);\n    }\n\n    properties[fieldName] = resolveField(field);\n    if (field.description) {\n      properties[fieldName].description = field.description;\n    }\n  }\n\n  return {\n    type: 'object',\n    ...(required.length ? { required } : {}),\n    properties,\n    ...(type.description ? { description: type.description } : {}),\n  };\n}\n\nfunction resolveField(field: GraphQLField<any, any> | GraphQLInputField) {\n  return resolveFieldType(field.type);\n}\n\n// array -> [type]\n// type -> $ref\n// scalar -> swagger primitive\nexport function resolveFieldType(\n  type: GraphQLOutputType | GraphQLNamedType\n): any {\n  if (isNonNullType(type)) {\n    return resolveFieldType(type.ofType);\n  }\n\n  if (isListType(type)) {\n    return {\n      type: 'array',\n      items: resolveFieldType(type.ofType),\n    };\n  }\n\n  if (isObjectType(type)) {\n    return {\n      $ref: mapToRef(type.name),\n    };\n  }\n\n  if (isScalarType(type)) {\n    return (\n      mapToPrimitive(type.name) || {\n        type: 'object',\n      }\n    );\n  }\n\n  return {\n    type: 'object',\n  };\n}\n"]}