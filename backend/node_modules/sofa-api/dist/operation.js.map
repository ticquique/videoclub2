{"version":3,"file":"operation.js","sourceRoot":"","sources":["../src/operation.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  GraphQLSchema,\n  GraphQLObjectType,\n  isObjectType,\n  getNamedType,\n  isUnionType,\n  DocumentNode,\n  OperationDefinitionNode,\n  VariableDefinitionNode,\n  isNonNullType,\n  SelectionNode,\n  InlineFragmentNode,\n  GraphQLNamedType,\n  SelectionSetNode,\n  isScalarType,\n  TypeNode,\n  isListType,\n  ArgumentNode,\n  GraphQLField,\n  GraphQLArgument,\n  GraphQLInputType,\n  GraphQLList,\n  ListTypeNode,\n  GraphQLNonNull,\n  NonNullTypeNode,\n  OperationTypeNode,\n  isInterfaceType,\n} from 'graphql';\nimport * as changeCase from 'change-case';\n\nimport { Ignore } from './types';\nimport { logger } from './logger';\n\nlet operationVariables: VariableDefinitionNode[] = [];\n\nfunction addOperationVariable(variable: VariableDefinitionNode) {\n  operationVariables.push(variable);\n}\n\nfunction resetOperationVariables() {\n  operationVariables = [];\n}\n\nfunction buildOperationName(name: string) {\n  return changeCase.camel(name);\n}\n\nexport type Skip = string[];\nexport type Force = string[];\n\nexport function buildOperation({\n  schema,\n  kind,\n  field,\n  models,\n  ignore,\n  depthLimit,\n}: {\n  schema: GraphQLSchema;\n  kind: OperationTypeNode;\n  field: string;\n  models: string[];\n  ignore: Ignore;\n  depthLimit?: number;\n}) {\n  resetOperationVariables();\n\n  logger.debug(`[Sofa] Building ${field} ${kind}`);\n\n  const document = buildDocumentNode({\n    schema,\n    fieldName: field,\n    kind,\n    models,\n    ignore,\n    depthLimit: depthLimit || 1,\n  });\n\n  // attach variables\n  (document.definitions[0] as any).variableDefinitions = [\n    ...operationVariables,\n  ];\n\n  resetOperationVariables();\n\n  return document;\n}\n\nfunction buildDocumentNode({\n  schema,\n  fieldName,\n  kind,\n  models,\n  ignore,\n  depthLimit,\n}: {\n  schema: GraphQLSchema;\n  fieldName: string;\n  kind: OperationTypeNode;\n  models: string[];\n  ignore: Ignore;\n  depthLimit: number;\n}) {\n  const typeMap: Record<OperationTypeNode, GraphQLObjectType> = {\n    query: schema.getQueryType()!,\n    mutation: schema.getMutationType()!,\n    subscription: schema.getSubscriptionType()!,\n  };\n  const type = typeMap[kind];\n  const field = type.getFields()[fieldName];\n  const operationName = buildOperationName(`${fieldName}_${kind}`);\n\n  if (field.args) {\n    field.args.forEach(arg => {\n      addOperationVariable(resolveVariable(arg));\n    });\n  }\n\n  const operationNode: OperationDefinitionNode = {\n    kind: 'OperationDefinition',\n    operation: kind,\n    name: {\n      kind: 'Name',\n      value: operationName,\n    },\n    variableDefinitions: [],\n    selectionSet: {\n      kind: 'SelectionSet',\n      selections: [\n        resolveField({\n          type,\n          field,\n          models,\n          firstCall: true,\n          path: [],\n          ancestors: [],\n          ignore,\n          depthLimit,\n          schema,\n        }),\n      ],\n    },\n  };\n  const document: DocumentNode = {\n    kind: 'Document',\n    definitions: [operationNode],\n  };\n\n  return document;\n}\n\nfunction resolveSelectionSet({\n  parent,\n  type,\n  models,\n  firstCall,\n  path,\n  ancestors,\n  ignore,\n  depthLimit,\n  schema,\n}: {\n  parent: GraphQLNamedType;\n  type: GraphQLNamedType;\n  models: string[];\n  path: string[];\n  ancestors: GraphQLNamedType[];\n  firstCall?: boolean;\n  ignore: Ignore;\n  depthLimit: number;\n  schema: GraphQLSchema;\n}): SelectionSetNode | undefined {\n  if (isUnionType(type)) {\n    const types = type.getTypes();\n\n    return {\n      kind: 'SelectionSet',\n      selections: types\n        .filter(\n          t =>\n            !hasCircularRef([...ancestors, t], {\n              depth: depthLimit,\n            })\n        )\n        .map<InlineFragmentNode>(t => {\n          return {\n            kind: 'InlineFragment',\n            typeCondition: {\n              kind: 'NamedType',\n              name: {\n                kind: 'Name',\n                value: t.name,\n              },\n            },\n            selectionSet: resolveSelectionSet({\n              parent: type,\n              type: t,\n              models,\n              path,\n              ancestors,\n              ignore,\n              depthLimit,\n              schema,\n            }) as SelectionSetNode,\n          };\n        }),\n    };\n  }\n\n  if (isInterfaceType(type)) {\n    const types = Object.values(schema.getTypeMap()).filter(\n      t => isObjectType(t) && t.getInterfaces().includes(type)\n    ) as GraphQLObjectType[];\n\n    return {\n      kind: 'SelectionSet',\n      selections: types\n        .filter(\n          t =>\n            !hasCircularRef([...ancestors, t], {\n              depth: depthLimit,\n            })\n        )\n        .map<InlineFragmentNode>(t => {\n          return {\n            kind: 'InlineFragment',\n            typeCondition: {\n              kind: 'NamedType',\n              name: {\n                kind: 'Name',\n                value: t.name,\n              },\n            },\n            selectionSet: resolveSelectionSet({\n              parent: type,\n              type: t,\n              models,\n              path,\n              ancestors,\n              ignore,\n              depthLimit,\n              schema,\n            }) as SelectionSetNode,\n          };\n        }),\n    };\n  }\n\n  if (isObjectType(type)) {\n    const isIgnored =\n      ignore.includes(type.name) ||\n      ignore.includes(`${parent.name}.${path[path.length - 1]}`);\n    const isModel = models.includes(type.name);\n\n    if (!firstCall && isModel && !isIgnored) {\n      return {\n        kind: 'SelectionSet',\n        selections: [\n          {\n            kind: 'Field',\n            name: {\n              kind: 'Name',\n              value: 'id',\n            },\n          },\n        ],\n      };\n    }\n\n    const fields = type.getFields();\n\n    return {\n      kind: 'SelectionSet',\n      selections: Object.keys(fields)\n        .filter(fieldName => {\n          return !hasCircularRef(\n            [...ancestors, getNamedType(fields[fieldName].type)],\n            {\n              depth: depthLimit,\n            }\n          );\n        })\n        .map(fieldName => {\n          return resolveField({\n            type: type,\n            field: fields[fieldName],\n            models,\n            path: [...path, fieldName],\n            ancestors,\n            ignore,\n            depthLimit,\n            schema,\n          });\n        }),\n    };\n  }\n}\n\nfunction resolveVariable(\n  arg: GraphQLArgument,\n  name?: string\n): VariableDefinitionNode {\n  function resolveVariableType(type: GraphQLList<any>): ListTypeNode;\n  function resolveVariableType(type: GraphQLNonNull<any>): NonNullTypeNode;\n  function resolveVariableType(type: GraphQLInputType): TypeNode;\n  function resolveVariableType(type: GraphQLInputType): TypeNode {\n    if (isListType(type)) {\n      return {\n        kind: 'ListType',\n        type: resolveVariableType(type.ofType),\n      };\n    }\n\n    if (isNonNullType(type)) {\n      return {\n        kind: 'NonNullType',\n        type: resolveVariableType(type.ofType),\n      };\n    }\n\n    return {\n      kind: 'NamedType',\n      name: {\n        kind: 'Name',\n        value: type.name,\n      },\n    };\n  }\n\n  return {\n    kind: 'VariableDefinition',\n    variable: {\n      kind: 'Variable',\n      name: {\n        kind: 'Name',\n        value: name || arg.name,\n      },\n    },\n    type: resolveVariableType(arg.type),\n  };\n}\n\nfunction getArgumentName(name: string, path: string[]): string {\n  return changeCase.camel([...path, name].join('_'));\n}\n\nfunction resolveField({\n  type,\n  field,\n  models,\n  firstCall,\n  path,\n  ancestors,\n  ignore,\n  depthLimit,\n  schema,\n}: {\n  type: GraphQLObjectType;\n  field: GraphQLField<any, any>;\n  models: string[];\n  path: string[];\n  ancestors: GraphQLNamedType[];\n  firstCall?: boolean;\n  ignore: Ignore;\n  depthLimit: number;\n  schema: GraphQLSchema;\n}): SelectionNode {\n  const namedType = getNamedType(field.type);\n  let args: ArgumentNode[] = [];\n\n  if (field.args && field.args.length) {\n    args = field.args.map<ArgumentNode>(arg => {\n      if (!firstCall) {\n        addOperationVariable(\n          resolveVariable(arg, getArgumentName(arg.name, path))\n        );\n      }\n\n      return {\n        kind: 'Argument',\n        name: {\n          kind: 'Name',\n          value: arg.name,\n        },\n        value: {\n          kind: 'Variable',\n          name: {\n            kind: 'Name',\n            value: getArgumentName(arg.name, path),\n          },\n        },\n      };\n    });\n  }\n\n  if (!isScalarType(namedType)) {\n    return {\n      kind: 'Field',\n      name: {\n        kind: 'Name',\n        value: field.name,\n      },\n      selectionSet: resolveSelectionSet({\n        parent: type,\n        type: namedType,\n        models,\n        firstCall,\n        path: [...path, field.name],\n        ancestors: [...ancestors, type],\n        ignore,\n        depthLimit,\n        schema,\n      }),\n      arguments: args,\n    };\n  }\n\n  return {\n    kind: 'Field',\n    name: {\n      kind: 'Name',\n      value: field.name,\n    },\n    arguments: args,\n  };\n}\n\nfunction hasCircularRef(\n  types: GraphQLNamedType[],\n  config: {\n    depth: number;\n  } = {\n    depth: 1,\n  }\n): boolean {\n  const type = types[types.length - 1];\n\n  if (isScalarType(type)) {\n    return false;\n  }\n\n  const size = types.filter(t => t.name === type.name).length;\n  return size > config.depth;\n}\n"]}