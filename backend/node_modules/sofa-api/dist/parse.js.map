{"version":3,"file":"parse.js","sourceRoot":"","sources":["../src/parse.ts"],"names":[],"mappings":";;AAAA,qCAQiB;AAEjB,SAAgB,aAAa,CAAC,EAC5B,KAAK,EACL,QAAQ,EACR,MAAM,GAKP;IACC,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE;QACzC,OAAO,eAAe,CAAC;YACnB,KAAK;YACL,IAAI,EAAE,QAAQ,CAAC,IAAI;YACnB,MAAM;SACT,CAAC,CAAC;KACJ;IACD,OAAO;AACT,CAAC;AAjBD,sCAiBC;AAED,SAAS,eAAe,CAAC,EACvB,KAAK,EACL,IAAI,EACJ,MAAM,GAKP;IACC,IAAI,IAAI,CAAC,IAAI,KAAK,WAAW,EAAE;QAC7B,MAAM,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAElD,IAAI,sBAAY,CAAC,SAAS,CAAC,EAAE;YAC3B,8DAA8D;YAC9D,IAAI,qBAAW,CAAC,wBAAc,EAAE,SAAS,CAAC,EAAE;gBAC1C,wBAAwB;gBACxB,KAAK,GAAG,KAAK,KAAK,MAAM,CAAC;aAC1B;YAED,OAAO,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;SACnC;QAED,IAAI,2BAAiB,CAAC,SAAS,CAAC,EAAE;YAChC,OAAO,KAAK,IAAI,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SACvE;QAED,OAAO,KAAK,CAAC;KACd;IAED,IAAI,IAAI,CAAC,IAAI,KAAK,UAAU,EAAE;QAC5B,OAAQ,KAAe,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAChC,eAAe,CAAC;YACd,KAAK,EAAE,GAAG;YACV,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,MAAM;SACP,CAAC,CACH,CAAC;KACH;IAED,IAAI,IAAI,CAAC,IAAI,KAAK,aAAa,EAAE;QAC/B,OAAO,eAAe,CAAC;YACrB,KAAK,EAAE,KAAK;YACZ,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,MAAM;SACP,CAAC,CAAC;KACJ;AACH,CAAC","sourcesContent":["import {\n  VariableDefinitionNode,\n  GraphQLSchema,\n  TypeNode,\n  isScalarType,\n  isEqualType,\n  GraphQLBoolean,\n  isInputObjectType,\n} from 'graphql';\n\nexport function parseVariable({\n  value,\n  variable,\n  schema,\n}: {\n  value: any;\n  variable: VariableDefinitionNode;\n  schema: GraphQLSchema;\n}) {\n  if (value !== undefined || value !== null) {\n    return resolveVariable({\n        value,\n        type: variable.type,\n        schema,\n    });\n  }\n  return;\n}\n\nfunction resolveVariable({\n  value,\n  type,\n  schema,\n}: {\n  value: any;\n  type: TypeNode;\n  schema: GraphQLSchema;\n}): any | any[] {\n  if (type.kind === 'NamedType') {\n    const namedType = schema.getType(type.name.value);\n\n    if (isScalarType(namedType)) {\n      // GraphQLBoolean.serialize expects a boolean or a number only\n      if (isEqualType(GraphQLBoolean, namedType)) {\n        // we don't support TRUE\n        value = value === 'true';\n      }\n\n      return namedType.serialize(value);\n    }\n\n    if (isInputObjectType(namedType)) {\n      return value && typeof value === 'object' ? value : JSON.parse(value);\n    }\n\n    return value;\n  }\n\n  if (type.kind === 'ListType') {\n    return (value as any[]).map(val =>\n      resolveVariable({\n        value: val,\n        type: type.type,\n        schema,\n      })\n    );\n  }\n\n  if (type.kind === 'NonNullType') {\n    return resolveVariable({\n      value: value,\n      type: type.type,\n      schema,\n    });\n  }\n}\n"]}