{"version":3,"file":"subscriptions.js","sourceRoot":"","sources":["../src/subscriptions.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  subscribe,\n  DocumentNode,\n  VariableDefinitionNode,\n  ExecutionResult,\n} from 'graphql';\nimport * as uuid from 'uuid/v4';\nimport * as request from 'request-promise-native';\nimport { forAwaitEach, isAsyncIterable } from 'iterall';\nimport { buildOperation } from './operation';\nimport { Sofa, isContextFn } from './sofa';\nimport { getOperationInfo } from './ast';\nimport { parseVariable } from './parse';\nimport { logger } from './logger';\n\n// To start subscription:\n//   - an url that Sofa should trigger\n//   - name of a subscription\n//   - variables if needed\n//   - some sort of an auth token\n//   - Sofa should return a unique id of that subscription\n//   - respond with OK 200\n\n// To stop subscription\n//   - an id is required\n//   - respond with OK 200\n\n// To update subscription\n//   - an id is required\n//   - new set of variables\n\nexport type ID = string;\nexport type SubscriptionFieldName = string;\n\nexport interface StartSubscriptionEvent {\n  subscription: SubscriptionFieldName;\n  variables: any;\n  url: string;\n}\n\nexport interface UpdateSubscriptionEvent {\n  id: ID;\n  variables: any;\n}\n\nexport interface StopSubscriptionResponse {\n  id: ID;\n}\n\ninterface BuiltOperation {\n  operationName: string;\n  document: DocumentNode;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\ninterface StoredClient {\n  name: SubscriptionFieldName;\n  url: string;\n  iterator: AsyncIterator<any>;\n}\n\nexport class SubscriptionManager {\n  private operations = new Map<SubscriptionFieldName, BuiltOperation>();\n  private clients = new Map<ID, StoredClient>();\n\n  constructor(private sofa: Sofa) {\n    this.buildOperations();\n  }\n\n  public async start(\n    event: StartSubscriptionEvent,\n    {\n      req,\n      res,\n    }: {\n      req: any;\n      res: any;\n    }\n  ) {\n    const id = uuid();\n    const name = event.subscription;\n\n    if (!this.operations.has(name)) {\n      throw new Error(`Subscription '${name}' is not available`);\n    }\n\n    const { document, operationName, variables } = this.operations.get(name)!;\n\n    logger.info(`[Subscription] Start ${id}`, event);\n\n    const result = await this.execute({\n      id,\n      name,\n      url: event.url,\n      document,\n      operationName,\n      variables,\n      req,\n      res,\n    });\n\n    if (typeof result !== 'undefined') {\n      return result;\n    }\n\n    return { id };\n  }\n\n  public async stop(id: ID): Promise<StopSubscriptionResponse> {\n    logger.info(`[Subscription] Stop ${id}`);\n\n    if (!this.clients.has(id)) {\n      throw new Error(`Subscription with ID '${id}' does not exist`);\n    }\n\n    const execution = this.clients.get(id)!;\n\n    if (execution.iterator.return) {\n      execution.iterator.return();\n    }\n\n    this.clients.delete(id);\n\n    return { id };\n  }\n\n  public async update(\n    event: UpdateSubscriptionEvent,\n    {\n      req,\n      res,\n    }: {\n      req: any;\n      res: any;\n    }\n  ) {\n    const { variables, id } = event;\n\n    logger.info(`[Subscription] Update ${id}`, event);\n\n    if (!this.clients.has(id)) {\n      throw new Error(`Subscription with ID '${id}' does not exist`);\n    }\n\n    const { name: subscription, url } = this.clients.get(id)!;\n\n    this.stop(id);\n\n    return this.start(\n      {\n        url,\n        subscription,\n        variables,\n      },\n      {\n        req,\n        res,\n      }\n    );\n  }\n\n  private async execute({\n    id,\n    document,\n    name,\n    url,\n    operationName,\n    variables,\n    req,\n    res,\n  }: {\n    id: ID;\n    name: SubscriptionFieldName;\n    url: string;\n    document: DocumentNode;\n    operationName: string;\n    variables: Record<string, any>;\n    req: any;\n    res: any;\n  }) {\n    const variableNodes = this.operations.get(name)!.variables;\n    const variableValues = variableNodes.reduce((values, variable) => {\n      const value = parseVariable({\n        value: variables[variable.variable.name.value],\n        variable,\n        schema: this.sofa.schema,\n      });\n\n      if (typeof value === 'undefined') {\n        return values;\n      }\n\n      return {\n        ...values,\n        [name]: value,\n      };\n    }, {});\n\n    const C = isContextFn(this.sofa.context)\n      ? await this.sofa.context({ req, res })\n      : this.sofa.context;\n    const execution = await subscribe({\n      schema: this.sofa.schema,\n      document,\n      operationName,\n      variableValues,\n      contextValue: C,\n    });\n\n    if (isAsyncIterable(execution)) {\n      // successful\n\n      // add execution to clients\n      this.clients.set(id, {\n        name,\n        url,\n        iterator: execution as any,\n      });\n\n      // success\n      forAwaitEach(execution, async result => {\n        await this.sendData({\n          id,\n          result,\n        });\n      }).then(\n        () => {\n          // completes\n          this.stop(id);\n        },\n        e => {\n          logger.info(`Subscription #${id} closed`);\n          console.log(e);\n          this.stop(id);\n        }\n      );\n    } else {\n      return execution as ExecutionResult<any>;\n    }\n  }\n\n  private async sendData({ id, result }: { id: ID; result: any }) {\n    if (!this.clients.has(id)) {\n      throw new Error(`Subscription with ID '${id}' does not exist`);\n    }\n\n    const { url } = this.clients.get(id)!;\n\n    logger.info(`[Subscription] Trigger ${id}`);\n\n    await request.post(url, {\n      json: result,\n    });\n  }\n\n  private buildOperations() {\n    const subscription = this.sofa.schema.getSubscriptionType();\n\n    if (!subscription) {\n      return;\n    }\n\n    const fieldMap = subscription.getFields();\n\n    for (const field in fieldMap) {\n      const document = buildOperation({\n        kind: 'subscription',\n        field,\n        schema: this.sofa.schema,\n        models: this.sofa.models,\n        ignore: this.sofa.ignore,\n      });\n\n      const { variables, name: operationName } = getOperationInfo(document)!;\n\n      this.operations.set(field, {\n        operationName,\n        document,\n        variables,\n      });\n    }\n  }\n}\n"]}